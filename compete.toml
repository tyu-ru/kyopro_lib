# Path to the test file (Liquid template)
#
# Variables:
#
# - `manifest_dir`: Package directory
# - `contest`:      Contest ID (e.g. "abc100")
# - `bin_name`:     Name of a `bin` target (e.g. "abc100-a")
# - `bin_alias`:    "Alias" for a `bin` target defined in `pacakge.metadata.cargo-compete` (e.g. "a")
# - `problem`:      Alias for `bin_alias` (deprecated)
#
# Additional filters:
#
# - `kebabcase`: Convert to kebab case (by using the `heck` crate)
test-suite = "{{ manifest_dir }}/testcases/{{ bin_alias }}.yml"

# Open files with the command (`jq` command that outputs `string[] | string[][]`)
#
# VSCode:
#open = '[["code", "-a", .manifest_dir], ["code"] + (.paths | map([.src, .test_suite]) | flatten)]'
# Emacs:
#open = '["emacsclient", "-n"] + (.paths | map([.src, .test_suite]) | flatten)'

[template]
src = '''
use proconio::input;
#[allow(unused_imports)]
use proconio::marker::*;
#[allow(unused_imports)]
use itertools::Itertools;
#[allow(unused_imports)]
use itertools::{iproduct, izip};
#[allow(unused_imports)]
use itertools_num::ItertoolsNum;
#[allow(unused_imports)]
use maplit::*;

fn main() {
    input! {
        a: i64, b: i64, c: i64, d: i64,
        x: i64,
        n: usize,
        a: [i64; n],
        ab: [(Usize1, Usize1); n - 1],
        s: Chars,
    }
    // println!("Yes");
    // println!("No");
    // println!("{}", );
}
'''

[template.new]
# `profile` for `Cargo.toml`.
#
# By setting this, you can run tests with `opt-level=3` while enabling `debug-assertions` and `overflow-checks`.
#profile = '''
#[dev]
#opt-level = 3
#'''
dependencies = '''
num = "=0.2.1"
num-bigint = "=0.2.6"
num-complex = "=0.2.4"
num-integer = "=0.1.42"
num-iter = "=0.1.40"
num-rational = "=0.2.4"
num-traits = "=0.2.11"
#num-derive = "=0.3.0"
ndarray = "=0.13.0"
nalgebra = "=0.20.0"
#alga = "=0.9.3"
#libm = "=0.2.1"
rand = { version = "=0.7.3", features = ["small_rng"] }
#getrandom = "=0.1.14"
#rand_chacha = "=0.2.2"
#rand_core = "=0.5.1"
#rand_hc = "=0.2.0"
#rand_pcg = "=0.2.1"
#rand_distr = "=0.2.2"
#petgraph = "=0.5.0"
#indexmap = "=1.3.2"
#regex = "=1.3.6"
#lazy_static = "=1.4.0"
#ordered-float = "=1.0.2"
ascii = "=1.0.0"
#permutohedron = "=0.2.4"
superslice = "=1.0.0"
itertools = "=0.9.0"
itertools-num = "=0.1.3"
maplit = "=1.0.2"
either = "=1.5.3"
#im-rc = "=14.3.0"
#fixedbitset = "=0.2.0"
#bitset-fixed = "=0.1.0"
proconio = { version = "0.3.6", features = ["derive"] }
#text_io = "=0.1.8"
#whiteread = "=0.5.0"
rustc-hash = "=1.1.0"
#smallvec = "=1.2.0"
klalgebra = { path = "../kyopro_lib/klalgebra/" }
klfewnick_tree = { path = "../kyopro_lib/klfewnick_tree/" }
klgrid = { path = "../kyopro_lib/klgrid/" }
klhld = { path = "../kyopro_lib/klhld/" }
klinftype = { path = "../kyopro_lib/klinftype/" }
klinputmarker = { path = "../kyopro_lib/klinputmarker/" }
kliterator = { path = "../kyopro_lib/kliterator/" }
klkitamasa = { path = "../kyopro_lib/klkitamasa/" }
klmacro = { path = "../kyopro_lib/klmacro/" }
klmath = { path = "../kyopro_lib/klmath/" }
klmisc = { path = "../kyopro_lib/klmisc/" }
klmodint = { path = "../kyopro_lib/klmodint/" }
klrle = { path = "../kyopro_lib/klrle/" }
klsegtree = { path = "../kyopro_lib/klsegtree/" }
klstdfeature = { path = "../kyopro_lib/klstdfeature/" }
klsieve = { path = "../kyopro_lib/klsieve/" }
klstring = { path = "../kyopro_lib/klstring/" }
klunionfind = { path = "../kyopro_lib/klunionfind/" }
proconio_enum_query = { git = "https://github.com/tyu-ru/proconio_enum_query" }
'''
dev-dependencies = '''
#atcoder-202004-lock = { git = "https://github.com/qryxip/atcoder-202004-lock" }
'''

[template.new.copy-files]
"./template-cargo-lock.toml" = "Cargo.lock"

[new]
kind = "cargo-compete"
# Platform
#
# - atcoder
# - codeforces
# - yukicoder
platform = "atcoder"
# Path (Liquid template)
#
# Variables:
#
# - `contest`:      Contest ID. **May be nil**
# - `package_name`: Package name
path = "./{{ contest }}"

#[new]
#kind = "oj-api"
#url = "https://atcoder.jp/contests/{{ id }}"
#path = "./{{ contest }}"

# for Library-Checker
#[add]
#url = "https://judge.yosupo.jp/problem/{{ args[0] }}"
##is-contest = ["false"] # optional
##target-kind = "bin" # ["bin", "example"]. default to "bin"
#bin-name = '{{ args[0] }}'
##bin-alias = '{{ args[0] }}' # optional
##bin-src-path = './src/bin/{{ bin_alias }}.rs' # optional

# for yukicoder
#[add]
#url = '{% case args[0] %}{% when "contest" %}https://yukicoder.me/contests/{{ args[1] }}{% when "problem" %}https://yukicoder.me/problems/no/{{ args[1] }}{% endcase %}'
#is-contest = ["bash", "-c", '[[ $(cut -d / -f 4) == "contests" ]]'] # optional
##target-kind = "bin" # ["bin", "example"]. default to "bin"
#bin-name = '{% assign segments = url | split: "/" %}{{ segments[5] }}'
##bin-alias = '{% assign segments = url | split: "/" %}{{ segments[5] }}' # optional
##bin-src-path = './src/bin/{{ bin_alias }}.rs' # optional

[add]
url = "https://atcoder.jp/contests/{{ args[0] }}"
bin-name = '{{ args[0] }}'

[test]
# Profile for `cargo build`. ("dev" | "release")
#
# Defaults to `"dev"`.
#profile = "dev"

[submit.transpile]
kind = "command"
args = ["cargo", "equip", "--resolve-cfgs", "--remove", "docs", "comments", "--minify", "libs", "--rustfmt", "--check", "--exclude-atcoder-crates", "--exclude", "proconio", "--bin", "{{ bin_name }}"]
##language_id = ""
